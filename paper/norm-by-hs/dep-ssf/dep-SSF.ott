% Dependent Stratified System F=.
metavar term_var, x, y, z, f, u, v ::=
metavar type_var, X, Y ::= 
indexvar level_var, l ::= 
         
grammar

kind, p,q :: 'Kind_' ::=
  | l                  ::  :: Level
  | p + 1              ::  :: LevelUp
  | max ( p , q )     ::  :: Max
    {{ tex \mathsf{max} ( [[p]] , [[q]] ) }}

type, T  :: 'Type_' ::=
  | X            ::   :: Var
  | T -> T'      ::   :: Arrow
    {{ tex [[T]] \to [[T']] }}
  | Forall X : p . T ::   :: Forall
    {{ tex \forall [[X]]:*_{[[p]]} . [[T]] }}
  | ( x : T ) -> T' :: :: Pi
  {{tex \Pi [[x]]:[[T]].[[T']] }}
  | t = t'       ::   :: Eq
  | ( T )        :: S :: Parens
  | [ T / X ] T' :: M :: Substitution
  | [ t / x ] T  :: M :: Substitution2

term, t :: 'Term_' ::= 
  | x              ::   :: Variables
  | \ x : T . t    ::   :: Lam (+ bind x in t +)
    {{ tex \lambda [[x]] : [[T]] . [[t]] }}
  | \\ X : p . t       ::   :: TypeAbs
    {{ tex \Lambda [[X]] : *_{[[p]]} . [[t]] }}
  | t1 t2          ::   :: App
  | join           ::   :: Join
  {{tex join }}
  | t [ T ]        ::   :: TypeApp
  | [ t / x ] t'   :: M :: Substitution
  | [ T / X ] t    :: M :: TypeSubstitution
  | ( t )          :: S :: Parens

G {{ tex \Gamma }} :: 'Context_' ::=
  | x : T       :: :: TermElement
  | X : p       :: :: TypeElement
  {{tex [[X]] : *_{[[p]]} }}
  | .           :: :: Empty
  | G , G'      :: :: Extension
  | ( G )       :: S :: Parens

formula :: 'formula_' ::=
  | judgement   ::  :: judgement
  | ( formula ) ::  :: parens
  | t1 ! t2     ::  :: Join
  {{tex [[t1]] \join [[t2]] }}
  | x notin G   ::  :: Notin1
  {{tex [[x]] \not\in [[G]] }}
  | X notin G   ::  :: Notin2
  {{tex [[X]] \not\in [[G]] }}
  

defns
  JTyping :: '' ::=
  defn
  G |- T : p :: :: kinding :: 'K_'
    {{ tex [[G]] \vdash [[T]] : *_{[[p]]} }}
  by

  --------------------- :: Var
  G, X : p, G' |- X : p

  G |- T1 : p
  G, x : T1 |- T2 : q
  ------------------------------ :: Arrow
  G |- (x : T1) -> T2 : max(p,q)

  G, X:p |- T : q
  ------------------------------- :: Forall
  G |- Forall X:p.T : max(p+1,q)

  G |- T : p
  G |- t1 : T
  G |- t2 : T
  ---------------- :: Eq
  G |- t1 = t2 : p

defns
 Opsem :: '' ::=
 defn
 t ~> t' :: :: opsem :: 'R_'
   {{tex [[t]] \redto [[t']] }}
 by
  
  -------------------------- :: Beta
  (\x : T . t) t' ~> [t'/x]t  

  ---------------------- :: TypeRed
  (\\X:p.t)[T] ~> [T/X]t

  t ~> t'
  ----------------- :: Lam
  \x:T.t ~> \x:T.t'

  t ~> t'
  ------------------- :: TypeAbs
  \\X:p.t ~> \\X:p.t'

  t1 ~> t'1
  --------------- :: App1
  t1 t2 ~> t'1 t2

  t2 ~> t'2
  --------------- :: App2
  t1 t2 ~> t1 t'2

  t ~> t'
  ------------- :: TypeApp
  t[T] ~> t'[T]
  
  defn
  G Ok :: :: ok :: ''
  {{tex [[G]]\,Ok }}
  by
  
  ---- :: Empty
  . Ok

  x notin G,G'
  (G,G') Ok
  G |- T : p
  ------------- :: VarExt
  (G,x:T,G') Ok

  X notin G,G'
  (G,G') Ok
  ------------- :: TyVarExt
  (G,X:p,G') Ok

  defn
  G |- t : T :: :: typing :: '' 
    {{ tex [[G]] \vdash [[t]] : [[T]] }}
  by

  G Ok
  G |- T : p  
  --------------------- :: Var
  G, x : T, G' |- x : T

  G, x : T1 |- t : T2
  ----------------------------- :: Lam
  G |- \x:T1.t : (x : T1) -> T2

  G |- t1 : (x : T1) -> T2
  G |- t2 : T1
  --------------------- :: App
  G |- t1 t2 : [t2/x]T2

  G, X:p |- t : T
  ------------------------------- :: TypeAbs
  G |- \\X : p .t : Forall X:p.T

  G |- t : Forall X:p.T'
  G |- T : p
  ---------------------- :: TypeApp
  G |- t[T] : [T/X]T'

  G Ok
  t1 ! t2  
  G |- t1 : T
  G |- t2 : T
  ------------------- :: Join
  G |- join : t1 = t2

  G |- t0 : t1 = t2
  G |- t : [t1/x]T
  ----------------- :: Conv
  G |- t : [t2/x]T