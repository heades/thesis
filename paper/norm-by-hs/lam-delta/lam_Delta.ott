
metavar var, x, y, z, f, u, v, r, q ::=
metavar tvar, X, Y ::= 
  
indexvar ivar, k, s, i, j ::= 

grammar

Term {{tex \mathcal{T} }}, t, s, a, b, c :: 'term_' ::= 
  | x              ::   :: Variables
  | \ x : T . t    ::   :: Lam (+ bind x in t +)
    {{ tex \lambda [[x]]:[[T]] . [[t]] }}
  | \m x : T . t   ::   :: Delta (+ bind x in t +)
    {{ tex \Delta [[x]] : [[T]] . [[ t ]] }}
  | t1 t2          ::   :: App
  | h n            :: S :: HeadNormalApp
  | [ t / x ] t'   :: M :: Substitution
  | [ t / x ] h    :: M :: SubstittionHead
  | [ t / x ] A t' :: M :: HereditarySub
    {{ tex [ [[t]] / [[x]] ]^{[[A]]} [[t']] }}
  | apply A ( t , t' ) :: M :: Apply
    {{ tex \textsf{apply}_{[[A]]}([[t]],[[t']]) }}
  | apply A            :: M :: Apply2
    {{ tex \textsf{apply}_{[[A]]} }}
  | apply              :: M :: Apply3
    {{ tex \textsf{apply} }}
  | ctype A ( t , t' ) :: M :: Ctype
    {{ tex \textsf{ctype}_{[[A]]}([[t]],[[t']]) }}
  | ctype A ( t , h )  :: M :: Ctype2
    {{ tex \textsf{ctype}_{[[A]]}([[t]],[[h]]) }}
  | ctype A            :: M :: Ctype3
    {{ tex \textsf{ctype}_{[[A]]} }}
  | ctype              :: M :: Ctype4
    {{ tex \textsf{ctype} }}
  | head ( t )         :: M :: Head
    {{ tex \textsf{head}([[t]]) }}
  | ( t )              :: M :: Parens
  | CC [ t ]           :: M :: Plug
  | forall CC [ t ]    :: M :: MultiPlug
    {{ tex \overrightarrow{ [[ CC ]] [ [[t]] ]} }}
  | compress t         :: M :: Compress
    {{tex \mathsf{compress}\,[[t]] }}
  | decomp_term x t    :: M :: Decomp
  {{tex \textsf{decomp\_term}\,[[x]]\,[[t]] }}
  | comp_term t        :: M :: Comp
  {{tex \textsf{comp\_term}\,[[x]]\,[[t]] }}
  | < Th , A , A' > t  :: M :: Ssub
  {{tex \langle [[Th]] \rangle^{[[A]]}_{[[A']]} [[t]] }}
  | < Th > t  :: M :: Ssub2
  {{tex \langle [[Th]] \rangle [[t]] }}
  | Th 3         :: M :: Cod
  {{tex [[Th]]^3 }}
  | Th 1         :: M :: Dom
  {{tex [[Th]]^1 }}
  | Th 2         :: M :: Dom2
  {{tex [[Th]]^2 }}
  | lift Th A1 A2 t :: M :: Lift
  {{tex \langle [[Th]] \rangle^{\uparrow^{[[A1]]}_{[[A2]]} }\,[[t]] }}
  | norm_fun t      :: M :: Norm
  {{tex \mathsf{norm}\,[[t]] }}
  

n_Term, n, m :: 'norm_term_' ::=
  | x            :: :: Var
  | \ x : T . n  :: :: Lam
  | \m x : T . n :: :: Mu
  | h n          :: :: App

hn_Term, h :: 'head_' ::=
  | x   :: :: Var
  | h n :: :: App
  
Type {{tex \Psi }}, T,A,B,C :: 'type_' ::=
  | _|_            ::   :: Bottom
    {{ tex \perp }}
  | base           ::   :: Base
    {{ tex \text{b} }}
  | A -> B       ::   :: Implication
    {{ tex [[A]] \to [[B]] }}
  | { - A }      ::   :: Negation
    {{ tex \neg [[A]] }}
  | [ t / x ] A  :: M :: Substitution1
  | ( A )        :: M :: Parens

% Multi-Substitutions.
Th {{tex \Theta}} :: 'multsubst_' ::=
  | .              :: M :: Empty
  {{tex \cdot }}
  |  ( x , z , t ) :: M :: Element
  {{tex ([[x]],[[z]],[[t]]) }}
  | Th1 , Th2      :: M :: Extend

ECtx {{tex \mathcal{E} }}, CC {{tex \mathcal{C} }} :: 'ectx_' ::=
  | [] :: :: Hole
    {{tex \Box }}
  | \ x : T . CC  ::   :: Lam 
    {{ tex \lambda [[x]]:[[T]] . [[ CC ]] }}
  | \m x : T . CC ::   :: Delta
    {{ tex \Delta [[x]] : [[T]] . [[ CC ]] }}
  | t CC          ::   :: App1
  | CC t          ::   :: App2

assump, P {{tex \Pi }}, G {{tex \Gamma }} :: 'ctx_' ::=
  | .              :: M :: Empty
    {{ tex \cdot }}
  | x : T          :: M :: Vars
  | P1 , P2        :: M :: Extension
  | ( P )          :: M :: Parens
  | Th 1 : T       :: M :: Dom1
  {{tex [[Th]]^1 : [[T]] }}
  | Th 2 : T       :: M :: Dom2
  {{tex [[Th]]^2 : [[T]] }}

terminals :: '' ::=
  | ->  :: :: Arrow
    {{ tex \to }}
  | |-  :: :: vdash
    {{ tex \vdash }}
  | \   :: :: slash
    {{ tex \lambda }}
  | ~>  :: :: step
    {{ tex \redto }}
  | ~*> :: :: mstep
    {{ tex \redto^* }}
  | ~!> :: :: normstep
    {{ tex \redto^! }}
  | =   :: :: Eq
  | ==  :: :: Equiv
    {{ tex \equiv }}
  | FV  :: :: FV_term
    {{ tex \textsf{FV} }}

 mstep :: 'mstep_' ::=
  | t            :: M :: Base
  | t ~*> mstep  :: M :: Step

 formula :: 'formula_' ::=
  | judgement              ::   :: judgement
  | formula1 ... formulak  ::   :: judgement_list
  | ( formula )            ::   :: parens
  | t fresh in t' and t''  ::   :: freshness
    {{ tex [[t]] \text{ fresh in } [[t']] \text{ and } [[t'']] }}
  | mstep                  ::   :: mstep 
  | FV ( t )               ::   :: FV
  | FV ( n )               :: M :: FVnorm
  | t ~!> t'               ::   :: normstep
  | t1 ~> t2 ~> t3         ::   :: three_step
  | x notin FV ( t )       ::   :: FV2
    {{ tex [[x]] \not \in \textsf{FV}([[t]]) }}
  | x notin FV ( n )       ::   :: FVnorm2
    {{ tex [[x]] \not \in \textsf{FV}([[n]]) }}
  | x notin dom ( G )      ::   :: Dom
    {{ tex [[x]] \not \in \textsf{dom}([[G]]) }}
  | t = t'                 :: M :: Eq
  | t == t'                :: M :: Equiv
  | A == B                 :: M :: TEquiv
  | A > B                  :: M :: Ordering
  | Term -> Term'  :: M :: FunType
  | Term1 -> Term2 -> Term3          :: M :: FunType1
  | Type -> Term1 -> Term2 -> Term3  :: M :: FunType2
  | Term1 -> Type -> Term2 -> Term3  :: M :: FunType3
  | Term1 U ECtx1 -> Type -> Term2 U ECtx2 -> Term3 U ECtx3 :: M :: FunType4
    {{tex [[Term1]] \cup [[ECtx1]] [[->]] [[Type]] [[->]] [[Term2]] \cup [[ECtx2]] [[->]] [[Term3]] \cup [[ECtx3]]}}
  | Var -> Term -> DecompedTerm      :: M :: FunType5
  {{tex \mathcal{V} \to [[Term]] \to DecompedTerm }}
  | DecompedTerm -> ( Term -> Term' ) -> DecompedTerm :: M :: FunType6
  {{tex DecompedTerm \to ( [[Term]] \to [[Term']] ) \to DecompedTerm }}
  | DecompedTerm -> Term :: :: FunType7
  {{tex DecompedTerm \to [[Term]] }}
  | A < A' :: M :: Ordering2
  | norm ( t ) :: :: NormTh
  {{tex \mathsf{norm}([[t]]) }}

subrules
  n <:: t
  h <:: t

defns
  Jtyp :: '' ::=
 defn
 G |- t : T  :: :: typing :: '' 
   {{tex [[G]] \vdash [[t]] : [[T]] }}
 by
  
  ----------------- :: Ax
  G, x : A |- x : A  

  G , x:A |- t : B
  ------------------------- :: Lam
  G |- \ x : A . t : A -> B 

  G |- t2 : A
  G |- t1 : A -> B
  ---------------- :: App
  G |- t1 t2 :  B

  G, x : {-A} |- t : _|_
  ----------------------- :: Delta
  G |- \m x : {-A}. t : A

 defn
 t ~> t' :: :: opsem :: ''
   {{tex [[t]] \redto [[t']] }}
 by
  
  ------------------------ :: Beta
  (\x:T . t) t' ~> [t'/x]t  

  y fresh in t and t'
  z fresh in t and t'
  ----------------------------------------------------------------- :: StructRed
  (\m x:{-(T1->T2)}.t) t' ~> \m y :{-T2}. [\z:T1->T2.(y (z t'))/x]t
