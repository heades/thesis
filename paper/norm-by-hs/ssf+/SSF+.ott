% Stratified System F+.
metavar term_var, x, y, z, f, u, v ::=
metavar type_var, X, Y ::= 
indexvar level_var, l ::= 
         
grammar

kind, p,q :: 'Kind_' ::=
  | l                  ::  :: Level
  | p + 1              ::  :: LevelUp
  | max ( p , q )     ::  :: Max
    {{ tex \mathsf{max} ( [[p]] , [[q]] ) }}

type, T  :: 'Type_' ::=
  | X            ::   :: Var
  | T -> T'      ::   :: Arrow
    {{ tex [[T]] \to [[T']] }}
  | T + T'       ::   :: Sum
    {{ tex [[T]] + [[T']] }}
  | Forall X : p . T ::   :: Forall
    {{ tex \forall [[X]]:*_{[[p]]} . [[T]] }}
  | ( T )        :: S :: Parens
  | [ T / X ] T' :: M :: Substitution

term, t :: 'Term_' ::= 
  | x              ::   :: Variables
  | \ x : T . t    ::   :: Lam (+ bind x in t +)
    {{ tex \lambda [[x]] : [[T]] . [[t]] }}
  | \\ X : p . t       ::   :: TypeAbs
    {{ tex \Lambda [[X]] : *_{[[p]]} . [[t]] }}
  | t1 t2          ::   :: App
  | inl( t )       ::   :: Inl
  {{tex inl( [[t]] ) }}
  | inr( t )       ::   :: Inr
  {{tex inr( [[t]] ) }}
  | case t of x . t1 , y . t2 :: :: Case
  {{tex case\,[[t]]\,of\,[[x]].[[t1]],[[y]].[[t2]] }}
  | t [ T ]        ::   :: TypeApp
  | [ t / x ] t'   :: M :: Substitution
  | [ T / X ] t    :: M :: TypeSubstitution
  | ( t )          :: S :: Parens

G {{ tex \Gamma }} :: 'Context_' ::=
  | x : T       :: :: TermElement
  | X : p       :: :: TypeElement
  {{tex [[X]] : *_{[[p]]} }}
  | .           :: :: Empty
  | G , G'      :: :: Extension
  | ( G )       :: :: Paren

formula :: 'formula_' ::=
  | judgement   ::  :: judgement
  | ( formula ) ::  :: parens
  | x notin G   ::  :: Notin1
  {{tex [[x]] \not\in [[G]] }}
  | X notin G   ::  :: Notin2
  {{tex [[X]] \not\in [[G]] }}
  | p <= q      ::  :: Leq
  {{tex [[p]] \leq [[q]] }}

defns
  JTyping :: '' ::=
  defn
  G |- T : p :: :: kinding :: 'K_'
    {{ tex [[G]] \vdash [[T]] : *_{[[p]]} }}
  by

  G Ok
  p <= q
  --------------------- :: Var
  G, X : q, G' |- X : p

  G |- T1 : p
  G |- T2 : q
  ------------------------- :: Arrow
  G |- T1 -> T2 : max(p,q)

  G, X:p |- T : q
  ------------------------------- :: Forall
  G |- Forall X:p.T : max(p+1,q)

  G |- T1 : p
  G |- T2 : q
  ----------------------- :: Sum
  G |- T1 + T2 : max(p,q)

defns
 Opsem :: '' ::=
 defn
 t ~> t' :: :: opsem :: 'R_'
   {{tex [[t]] \redto [[t']] }}
 by
  
  -------------------------- :: Beta
  (\x : T . t) t' ~> [t'/x]t  

  ---------------------- :: TypeRed
  (\\X:p.t)[T] ~> [T/X]t

  ----------------------------------- :: CaseInl
  case inl(t) of x.t1,x.t2 ~> [t/x]t1

  ----------------------------------- :: CaseInr
  case inr(t) of x.t1,x.t2 ~> [t/x]t2

  --------------------------------------------------------- :: CaseApp
  (case t of x.t1,x.t2) t' ~> case t of x.(t1 t'),x.(t2 t')

  ------------------------------------------------------------------------------------------------------- :: CaseCase
  case (case t of x.t1,x.t2) of y.t3,y.t4 ~> case t of x.(case t1 of y.t3,y.t4), x.(case t2 of y.t3,y.t4)

  t ~> t'
  ----------------- :: Lam
  \x:T.t ~> \x:T.t'

  t ~> t'
  ------------------- :: TypeAbs
  \\X:p.t ~> \\X:p.t'

  t1 ~> t'1
  --------------- :: App1
  t1 t2 ~> t'1 t2

  t2 ~> t'2
  --------------- :: App2
  t1 t2 ~> t1 t'2

  t ~> t'
  ------------- :: TypeApp
  t[T] ~> t'[T]

  t ~> t'
  ----------------- :: Inl
  inl(t) ~> inl(t')

  t ~> t'
  ----------------- :: Inr
  inr(t) ~> inr(t')

  t ~> t'
  ------------------------------------------- :: Case1
  case t of x.t1,x.t2 ~> case t' of x.t1,x.t2

  t1 ~> t'1
  ------------------------------------------- :: Case2
  case t of x.t1,x.t2 ~> case t of x.t'1,x.t2

  t2 ~> t'2
  ------------------------------------------- :: Case3
  case t of x.t1,x.t2 ~> case t of x.t1,x.t'2

  defn
  G Ok :: :: ok :: ''
  {{tex [[G]]\,Ok }}
  by
  
  ---- :: Empty
  . Ok

  x notin G
  G Ok
  G |- T : p
  ------------- :: VarExt
  (G,x:T) Ok

  X notin G,G'
  G Ok
  ------------- :: TyVarExt
  (G,X:p) Ok
  
  defn
  G |- t : T :: :: typing :: '' 
    {{ tex [[G]] \vdash [[t]] : [[T]] }}
  by

  G |- T : p  
  --------------------- :: Var
  G, x : T, G' |- x : T

  G, x : T1 |- t : T2
  ----------------------- :: Lam
  G |- \x:T1.t : T1 -> T2

  G |- t1 : T1 -> T2
  G |- t2 : T1
  ------------------ :: App
  G |- t1 t2 : T2

  G, X:p |- t : T
  ------------------------------- :: TypeAbs
  G |- \\X : p .t : Forall X:p.T

  G |- t : Forall X:p.T'
  G |- T : p
  ---------------------- :: TypeApp
  G |- t[T] : [T/X]T'

  G |- t : T1
  G |- T2 : p
  --------------------- :: Inl
  G |- inl(t) : T1 + T2

  G |- t : T2
  G |- T1 : p
  --------------------- :: Inr
  G |- inr(t) : T1 + T2

  G |- t : T1 + T2
  G,x:T1 |- t1 : T
  G,x:T2 |- t2 : T
  ---------------------------- :: Case
  G |- case t of x.t1,x.t2 : T