% System Fw.
metavar term_var, x, y, z, f, u, v ::=
metavar type_var, X, Y, Z, S, N ::= 

grammar

kind, K  :: 'Kind_' ::=
  | Type    ::   :: Type
    {{ tex \mathsf{Type} }}
  | K -> K' ::   :: Arrow
    {{ tex [[K]] \to [[K']] }}

type, T :: 'Type_' ::=
  | X            ::   :: Var
  | \ X : K . T  ::   :: Lam
    {{ tex \lambda [[X]]:[[K]].[[T]] }} 
  | T1 T2        ::   :: App
  | T -> T'      ::   :: Arrow
    {{ tex [[T]] \to [[T']] }}
  | Forall X : K . T ::   :: Forall
    {{ tex \forall [[X]] : [[K]] . [[T]] }}
  | ( T )        :: S :: Parens
  | [ T / X ] T' :: M :: Substitution

term, t :: 'Term_' ::= 
  | x              ::   :: Variables
  | \ x : T . t    ::   :: Lam (+ bind x in t +)
    {{ tex \lambda [[x]] : [[T]] . [[t]] }}
  | \\ X : K . t       ::   :: TypeAbs
    {{ tex \Lambda [[X]] : [[K]] . [[t]] }}
  | t1 t2          ::   :: App
  | t [ T ]        ::   :: TypeApp
  | [ t / x ] t'   :: M :: Substitution
  | [ T / X ] t    :: M :: TypeSubstitution
  | ( t )          :: S :: Parens

G {{ tex \Gamma }} :: 'Context_' ::=
  | x : T       :: :: TermElement
  | X : K       :: :: TypeElement
  | .           :: :: Empty
  | G , G'      :: :: Extension

formula :: 'formula_' ::=
  | judgement   ::  :: judgement
  | ( formula ) ::  :: parens

defns
  JTyping :: '' ::=
  defn
    G |- T : K :: :: kinding :: 'K_'
    {{ tex [[G]] \vdash [[T]] : [[K]] }}
  by

  --------------------- :: Var
  G, X : K, G' |- X : K

  G |- T1 : Type
  G |- T2 : Type
  -------------------- :: Arrow
  G |- T1 -> T2 : Type

  G, X:K |- T : Type
  ------------------------- :: Forall
  G |- Forall X:K.T : Type

  G, X : K1 |- T : K2
  ----------------------- :: Lam
  G |- \X:K1.T : K1 -> K2

  G |- T1 : K1 -> K2
  G |- T2 : K1
  ------------------ :: App
  G |- T1 T2 : K2

  defn
  T1 = T2 :: :: BetaEq :: 'Eq_'
  {{tex [[T1]] \equiv_\beta [[T2]] }}
  by
  
  ----- :: Refl
  T = T

  T2 = T1
  ------- :: Sym
  T1 = T2

  T1 = T2
  T2 = T3
  ------- :: Trans
  T1 = T3

  T1 = T2
  ----------------- :: Lam
  \X:K.T1 = \X:K.T2

  T1 = T'1
  T2 = T'2
  --------------- :: App
  T1 T2 = T'1 T'2

  T1 = T'1
  T2 = T'2
  --------------------- :: Imp
  T1 -> T2 = T'1 -> T'2

  T1 = T2
  ----------------------------- :: Forall
  Forall X:K.T1 = Forall X:K.T2

  ----------------------- :: Beta
  (\X:K.T2) T1 = [T1/X]T2  

  defn
  G |- t : T :: :: typing :: '' 
    {{ tex [[G]] \vdash [[t]] : [[T]] }}
  by
  
  G |- T : Type
  --------------------- :: Var
  G, x : T, G' |- x : T

  G, x : T1 |- t : T2
  ----------------------- :: Lam
  G |- \x:T1.t : T1 -> T2

  G |- t1 : T1 -> T2
  G |- t2 : T1
  ------------------ :: App
  G |- t1 t2 : T2

  G, X : K |- t : T2
  -------------------------- :: TypeAbs
  G |- \\X:K.t : Forall X:K.T

  G |- t : Forall X:K.T'
  -------------------- :: TypeApp
  G |- t[T] : [T/X]T'
  
  T1 = T2
  G |- T2 : Type
  G |- t : T1
  ------------- :: Conv
  G |- t : T2

defns
 Opsem :: '' ::=
 defn
 T ~> T' :: :: topsem :: 'TR_'
   {{tex [[T]] \redto [[T']] }}
 by

  ---------------------- :: TypeBeta
  (\X:K.T) T' ~> [T'/X]T

  T ~> T'
  ----------------- :: TypeLam
  \X:K.T ~> \X:K.T'

  T1 ~> T'1
  --------------- :: TypeApp1
  T1 T2 ~> T'1 T2

  T2 ~> T'2
  --------------- :: TypeApp2
  T1 T2 ~> T1 T'2  

 defn
 t ~> t' :: :: opsem :: 'R_'
   {{tex [[t]] \redto [[t']] }}
 by

  -------------------------- :: Beta
  (\x : T . t) t' ~> [t'/x]t  

  ---------------------- :: TypeRed
  (\\X:K.t)[T] ~> [T/X]t  

  t ~> t'
  ----------------- :: Lam
  \x:T.t ~> \x:T.t'

  t ~> t'
  --------------- :: TypeAbs
  \\X:K.t ~> \\X:K.t'

  t1 ~> t'1
  --------------- :: App1
  t1 t2 ~> t'1 t2

  t2 ~> t'2
  --------------- :: App2
  t1 t2 ~> t1 t'2

  t ~> t'
  ------------- :: TypeApp
  t[T] ~> t'[T]
