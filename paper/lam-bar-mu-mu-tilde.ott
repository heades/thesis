metavar var, x, y, z, f, u ::=
metavar tvar, X, Y ::= 
metavar nvar, a {{ tex \alpha }}, b {{ tex \beta}} ::=
  
indexvar ivar, i, n, m, k, r ::= 

grammar

type, T,A,B,C :: 'type_' ::=
  | _|_          ::   :: Bottom
    {{ tex \perp }}
  | X            ::   :: Base
    {{ tex \text{X} }}
  | A -> B       ::   :: Implication
    {{ tex [[A]] \to [[B]] }}
  | A - B        ::   :: Subtraction
    {{tex [[A]] - [[B]] }}
  | { - A }      :: S :: Negation
    {{ tex \neg [[A]] }}
  | ( A )        :: M :: Parens

command, c :: 'cmd_' ::=
  | < v | e > :: :: Cut
  {{tex \langle [[v]]\,|\,[[e]] \rangle}}
  | [ e / a ] c :: :: Substitution1
  | [ v / x ] c :: :: Substitution2

value, v :: 'term_' ::= 
  | x              ::   :: Variables
  | \ x . v        ::   :: Lam
    {{ tex \lambda [[x]] . [[v]] }}
  | \m a . c       ::   :: NameAbstraction
    {{ tex \mu [[a]] . [[c]] }}
  | e * v          ::   :: Cmd
    {{tex [[e]] \cdot [[v]] }}

exp, e :: 'exp_' ::=
  | a              ::   :: Covar
  | \mt x . c      ::   :: Comu
    {{tex \tilde\mu [[x]].[[c]] }}
  | v * e          ::   :: Cmd
    {{tex [[v]] \cdot [[e]] }}
  | b \ . e       ::    :: Colam
  {{tex [[b]]\lambda.[[e]] }}

eval_ctx, E :: 'evalctx_' ::=
  | []  :: :: Hole
  {{tex \Box }}
  | < E | e > :: :: Cut1
  {{tex \langle [[E]]\,|\,[[e]] \rangle }}
  | < v | E > :: :: Cut2
  {{tex \langle [[v]]\,|\,[[E]] \rangle }}
  | \ x . E      :: :: Lam
  {{tex \lambda [[x]].[[E]] }}
  | \ m a . E    :: :: Mu
  {{tex \mu [[a]].[[E]] }}
  | \mt x . E   :: :: MuT
  {{tex \tilde\mu [[x]].[[E]] }}
  | E * e     :: :: Cmd1
  {{tex [[E]] \cdot [[e]] }}
  | v * E     :: :: Cmd2
  {{tex [[v]] \cdot [[E]] }}

assump, P {{tex \Pi }}, G {{tex \Gamma }} :: 'ctx_' ::=
  | .             ::  :: Empty
    {{ tex \cdot }}
  | x : A         ::   :: Var
  | P1 , P2       ::  :: Extension
  | ( P )         :: M :: Parens

nassump, D {{tex \Delta }}, S {{tex \Sigma }} :: 'nctx_' ::=
  | .             ::  :: Empty
    {{ tex \cdot }}
  | a : A         ::  :: Types
  | D1 , ... , Dn :: M :: SetsOfNAssmp
  | D1 , D2       ::  :: Extension
  | ( D )         :: M :: Parens

terminals :: 'terminal_' ::=
  | |- :: :: Turnstyle
    {{tex \vdash }}
  | [] :: :: Box
    {{tex \Box }}
  | ~> :: :: Redto
    {{tex \redto }}

 formula :: 'formula_' ::=
  | judgement              ::  :: judgement
  | formula1 ... formulan  ::  :: judgement_list
  | ( formula )            ::  :: parens
  | a fresh in D           ::  :: fresh
    {{ tex [[a]] \text{ fresh in } [[D]]}}

defns
  Jtyp :: '' ::=
 defn
   c : ( G |- D ) :: :: cmd_typing :: '' 
   {{tex [[c]] : ( [[G]] \vdash [[D]] ) }}
by
  G |- v : A | D
  G | e : A |- D
  ----------------- :: Cut
  <v|e> : ( G |- D)  
  
defn
  G |- v : A | D :: :: value_typing :: ''
  {{tex [[G]] \vdash [[v]] : [[A]]\,|\,[[D]] }}
by

  --------------------- :: Var
  G, x : A |- x : A | D

  G, x : A |- v : B | D
  ---------------------- :: Lam
  G |- \x.v : A -> B | D

  c : (G |- b : B, D)
  -------------------- :: Mu
  G |- \m b.c : B | D  

  G | e : A |- D
  G |- v : B | D
  ---------------------- :: CoCtx
  G |- e * v : B - A | D

defn
  G | e : A |- D :: :: exp_typing :: ''
  {{tex [[G]]\,|\,[[e]]:[[A]] \vdash [[D]] }}
by

  --------------------- :: Covar
  G | a : A |- a : A, D

  c : (G,x:A |- D)
  --------------------- :: Comu
  G | \mt x.c : A |- D

  G |- v : A | D
  G | e : B |- D
  ----------------------- :: Ctx
  G | v * e : A -> B |- D

  G | e : B |- b : A, D
  --------------------- :: Colam
  G | b\.e : B - A |- D

defns
  JRed :: '' ::=
  defn
  c ~> c' :: :: red :: 'R_'
    {{tex [[c]] \redto [[c']] }}
  by    

  --------------------------------------- :: Beta
  <\x.v1 | v2 * e> ~> <v2 | \mt x.<v1|e>>

  ---------------------- :: Mu
  <\m b.c | e> ~> [e/b]c

  ----------------------- :: MuT
  <v | \mt x.c> ~> [v/x]c

  --------------------------------------- :: CoBeta
  <e2 * v | b\.e1> ~> <\m b.<v | e1>| e2>

  defn 
  E [ c ] ~> E' [ c' ] :: :: ctxred :: 'E_'
  {{tex [[E]][ [[c]] ] [[~>]] [[E']][ [[c']] ] }}
  by

   c ~> c'
   ------------- :: Ctx
   E[c] ~> E[c']
