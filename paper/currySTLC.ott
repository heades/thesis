% Curry-style Simply Typed Lambda-Calculus.
metavar term_var, x, y, z, f, u, v ::=
metavar type_var, X ::= 

grammar

type, T :: 'Type_' ::=
  | X       ::   :: Base
  | T -> T' ::   :: Arrow
    {{ tex [[T]] \to [[T']] }}
  | ( T )   :: S :: Parens  

term, t :: 'Term_' ::= 
  | x              ::   :: Variables
  | \ x . t        ::   :: Lam (+ bind x in t +)
    {{ tex \lambda [[x]] . [[t]] }}
  | t1 t2          ::   :: App
  | [ t / x ] t'   :: M :: Substitution
  | ( t )          :: S :: Parens

G {{ tex \Gamma }} :: 'Context_' ::=
  | x : T       :: :: Element
  | .           :: :: Empty
  | G , G'      :: :: Extension

formula :: 'formula_' ::=
  | judgement              ::  :: judgement
  | ( formula )            ::  :: parens

defns
  JTyping :: '' ::=
  defn
  G |- t : T :: :: typing :: '' 
    {{ tex [[G]] \vdash [[t]] : [[T]] }}
  by
  
  --------------------- :: Var
  G, x : T, G' |- x : T

  G, x : T1 |- t : T2
  ----------------------- :: Lam
  G |- \x.t : T1 -> T2

  G |- t1 : T1 -> T2
  G |- t2 : T1
  ------------------ :: App
  G |- t1 t2 : T2

defns
 Opsem :: '' ::=
 defn
 t ~> t' :: :: opsem :: 'R_'
   {{tex [[t]] \redto [[t']] }}
 by
  
  ----------------------- :: Beta
  (\x . t) t' ~> [t'/x]t  

  t ~> t'
  ----------------- :: Lam
  \x.t ~> \x.t'

  t1 ~> t'1
  --------------- :: App1
  t1 t2 ~> t'1 t2

  t2 ~> t'2
  --------------- :: App2
  t1 t2 ~> t1 t'2
